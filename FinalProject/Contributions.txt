Design:
Chetachi figured out how to work on csv files and designed the PropertyManagement class to do the bulk of the work with csv files. She later supplemented other classes such as
Property and PropertyOwner and filled in any gaps in the design, mostly surrounding working with csv files.

Sam came up with the basic design for the Property, PropertyOwner, PaymentRecord and DepartmentManagementMenu classes. His main contribution to design was coming up with how
these classes interact and keeping each year's tax record as an instance of a class. 

Aoife was in charge of the GUI and worked mainly on the DepartmentGui and OwnerGui classes. She found she also needed ExitHandlerClass and GuiRun as the project progressed.

Owen worked on the command line segment of the project and designed CommandLineRun to implement the functionality of each other class into the command line.


Documentation:
The UML Diagram was made by Sam and Chetachi. 

Sam made the CRC cards for Property, PaymentRecord, PropertyOwner, DepartmentManagementMenu, CommandLineRun, PropertyManagement and
ExitHandlerClass. Aoife made the CRC card for GuiRun, DepartmentGui and OwnerGui.

Each team member wrote the javadoc for their own methods as listed in implementation.



Implementation:
Note; any overlap of methods is intentional and means more than one of us contributed

Methods made by Chetachi:
In PaymentRecord; replaceLine, toString
In Property; initializingFiles, getPaymentRecords, setPaymentRecords, deleteProperty, removePropertyFrom, removeFromPaymentFile, addToPaymentFile, payTax, toString, replaceLine,
getEircode, setEircode, getOwner, setOwner, getAddress, setAddress, getMarketValue, setMarketValue, getLocationCategory, setLocationCategory, isPrincipalPrivateResidence, setPrincipalPrivateResidence,
fileContainsLine, addPropertyTo, swapPropertyTo.
In PropertyManagement; All methods except getPropertyByOwner
In PropertyOwner; initializing, getName, setName, getProperties, readPropertiesFile, replaceLine, toString, addPropertyTo, swapPropertyTo, removePropertyFrom

Methods made by Sam:
In DepartmentManagementMenu; getPropertyData, getOwnerData, getOverdueTax, areaRecords, areaStatistics, statistics, investigate
In PaymentRecord; PaymentRecord, getWasPaid, setWasPaid, getAmount, setAmount, getYear.
In Property; Property, setFixedCost, setValueBrackets, setValueBracketRates, setLocationCatRates, setPrincipalPrivateRate, setUnpaidPenalty, getCurrentYear, getRecord, getAllRecords,
taxDueThisYear, taxDue, getOverdueRecords, payTax.
In PropertyOwner; PropertyOwner, registerProperty, payTax, viewProperties, queryYear, queryProperty

Methods made by Aoife:
In DepartmentGui; All methods
In OwnerGui; All methods
In DepartmentManagementMenu; getPropPaymentData, sortByEircode
In PropertyManagement; getPropertyByOwner
In ExitHandlerClass; All methods
In GuiRun; All methods
In PropertyOwner; getProperty

Methods made by Owen:
In CommandLineRun: All methods



Testing:

Chetachi mostly tested the classes related to csv files. Her focus was on PropertyManagement but she also helped in testing Property. She also made the csv files we used for most of our testing.

Sam did a lot of the testing in the early phases of the project to make sure that the Property, PaymentRecord, PropertyOwner and DepartmentManagementMenu classes worked. He put
a good bit of his efforts into testing the taxDue method in Property and the investigate and statistics methods in DepartmentManagementMenu, making sure that all of the 
calculations were correct.

Aoife tested the GUI, making sure that each button and each input did what it was meant to and that the GUI could access and display the information stored in csv files.

Owen similarly tested the commandline and made sure it handled each input correctly and could display the requested data from the relevant csv file.
